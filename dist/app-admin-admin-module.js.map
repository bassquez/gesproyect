{"version":3,"sources":["webpack:///./src/app/admin/admin-routing.module.ts","webpack:///./src/app/admin/admin-user/admin-user.component.html","webpack:///./src/app/admin/admin-user/admin-user.component.scss","webpack:///./src/app/admin/admin-user/admin-user.component.ts","webpack:///./src/app/admin/admin.module.ts","webpack:///./src/app/admin/admin/admin.component.html","webpack:///./src/app/admin/admin/admin.component.scss","webpack:///./src/app/admin/admin/admin.component.ts","webpack:///./src/app/admin/register-user/register-user.component.html","webpack:///./src/app/admin/register-user/register-user.component.scss","webpack:///./src/app/admin/register-user/register-user.component.ts"],"names":[],"mappings":"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","file":"app-admin-admin-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminComponent } from './admin/admin.component';\nimport { AdminUserComponent } from './admin-user/admin-user.component';\nimport { RegisterUserComponent } from './register-user/register-user.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: AdminComponent,\n  children: [\n    {\n      path: '',\n      redirectTo: 'admin-user',\n      pathMatch: 'full'\n    },\n    {\n      path: 'admin-user',\n      component: AdminUserComponent,\n      data: {\n        title: 'Administrar Usuarios'\n      }\n    },\n    {\n      path: 'register-user',\n      component: RegisterUserComponent,\n      data: {\n        title: 'Registrar Usuario'\n      }\n    }\n  ]\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n","module.exports = \"<gp-toast [message]=\\\"toast.message\\\"></gp-toast>\\n<mat-card class=\\\"container\\\">\\n  <mat-card-header>\\n    <mat-card-title>\\n      <h1 matBadge=\\\"{{users.length}}\\\">Usuarios Registrados</h1>\\n    </mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <div class=\\\"table-responsive-sm\\\" *ngIf=\\\"!isEditing\\\">\\n\\n      <table class=\\\"table\\\">\\n        <thead class=\\\"\\\">\\n          <tr>\\n            <th scope=\\\"col\\\">Username</th>\\n            <th scope=\\\"col\\\">Email</th>\\n            <th scope=\\\"col\\\">Role</th>\\n            <th scope=\\\"col\\\">Actions</th>\\n          </tr>\\n        </thead>\\n        <tbody *ngIf=\\\"users.length === 0\\\">\\n          <tr>\\n            <td colspan=\\\"4\\\">\\n              <h1>There are no registered users.</h1>\\n            </td>\\n          </tr>\\n        </tbody>\\n        <tbody>\\n          <tr *ngFor=\\\"let user of users\\\">\\n            <td>{{user.username}}</td>\\n            <td>{{user.email}}</td>\\n            <td>{{user.role}}</td>\\n            <td>\\n              <button mat-raised-button (click)=\\\"enableEditing(user)\\\">\\n                <i class=\\\"fa fa-trash\\\"></i> Editar\\n              </button>\\n              <button mat-raised-button color=\\\"warn\\\" (click)=\\\"deleteUser(user)\\\" [disabled]=\\\"auth.currentUser._id === user._id\\\">\\n                <i class=\\\"fa fa-trash\\\"></i> Borrar\\n              </button>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"isEditing\\\">\\n      <form #form=\\\"ngForm\\\" [formGroup]=\\\"editForm\\\" (ngSubmit)=\\\"edit(user)\\\" class=\\\"form-signin container-fluid\\\">\\n        <mat-card-header class=\\\"row\\\">\\n          <mat-card-title class=\\\"col-12\\\">Registro de Usuario</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"row container-fluid\\\">\\n\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>username</mat-label>\\n              <input type=\\\"text\\\" matInput name=\\\"username\\\" formControlName=\\\"username\\\" disabled [ngModel]=\\\"nombre.value + '.' + apellido.value | lowercase\\\">\\n            </mat-form-field>\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Email</mat-label>\\n              <input type=\\\"text\\\" matInput [(ngModel)]=\\\"user.email\\\" placeholder=\\\"Email\\\" name=\\\"email\\\" formControlName=\\\"email\\\" />\\n              <mat-error *ngIf=\\\"email.invalid\\\">{{correoErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Identificación</mat-label>\\n              <input type=\\\"text\\\" [(ngModel)]=\\\"user.identificacion\\\" matInput placeholder=\\\"Identificacion\\\" name=\\\"identificacion\\\"\\n                formControlName=\\\"identificacion\\\" />\\n              <mat-error *ngIf=\\\"identificacion.invalid\\\">{{identificacionErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Nombre</mat-label>\\n              <input type=\\\"text\\\" matInput [(ngModel)]=\\\"user.nombre\\\" placeholder=\\\"Nombre\\\" name=\\\"nombre\\\" formControlName=\\\"nombre\\\" />\\n              <mat-error *ngIf=\\\"nombre.invalid\\\">{{nombreErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Apellido</mat-label>\\n              <input type=\\\"text\\\" matInput [(ngModel)]=\\\"user.apellido\\\" placeholder=\\\"Apellido\\\" name=\\\"apellido\\\"\\n                formControlName=\\\"apellido\\\" />\\n              <mat-error *ngIf=\\\"apellido.invalid\\\">{{apellidoErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Cargo</mat-label>\\n              <input type=\\\"text\\\" matInput [(ngModel)]=\\\"user.cargo\\\" placeholder=\\\"Cargo\\\" name=\\\"cargo\\\" formControlName=\\\"cargo\\\" />\\n              <mat-error *ngIf=\\\"cargo.invalid\\\">{{cargoErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n            <mat-form-field class=\\\"col\\\" appearance=\\\"fill\\\">\\n                <mat-label>Rol</mat-label>\\n                <mat-select [(value)]=\\\"role\\\" [(ngModel)]=\\\"user.role\\\" name=\\\"role\\\" placeholder=\\\"Rol\\\" formControlName=\\\"role\\\">\\n                  <mat-option>None</mat-option>\\n                  <mat-option value=\\\"admin\\\">Admin</mat-option>\\n                  <mat-option value=\\\"user\\\">User</mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n              <mat-form-field class=\\\"col\\\" appearance=\\\"fill\\\">\\n                  <mat-label>Contraseña</mat-label>\\n                  <input matInput id=\\\"password\\\" [type]=\\\"!hide ? 'password' : 'text'\\\" name=\\\"password\\\" formControlName=\\\"password\\\"\\n                    placeholder=\\\"Password\\\">\\n                  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n                  <mat-error *ngIf=\\\"password.invalid\\\">{{passErrorMessage()}}</mat-error>\\n                </mat-form-field>\\n          </div>\\n        </mat-card-content>\\n        <mat-card-actions class=\\\"row \\\">\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <button mat-flat-button type=\\\"submit\\\" color=\\\"accent\\\" [disabled]=\\\"!form.form.valid\\\">Editar</button>\\n            <button mat-flat-button type=\\\"button\\\" color=\\\"warn\\\" (click)=\\\"cancelEditing()\\\">\\n              <i class=\\\"fa fa-times\\\"></i> Cancel</button>\\n          </div>\\n        </mat-card-actions>\\n      </form>\\n    </div>\\n  </mat-card-content>\\n</mat-card>\\n\\n\\n<!--\\n<div class=\\\"card\\\" *ngIf=\\\"!isLoading\\\">\\n  <h4 class=\\\"card-header\\\">Registered users ({{users.length}})</h4>\\n  <div class=\\\"card-body\\\">\\n    <table class=\\\"table table-bordered\\\">\\n      <thead class=\\\"thead-light\\\">\\n        <tr>\\n          <th scope=\\\"col\\\">Username</th>\\n          <th scope=\\\"col\\\">Email</th>\\n          <th scope=\\\"col\\\">Role</th>\\n          <th scope=\\\"col\\\">Actions</th>\\n        </tr>\\n      </thead>\\n      <tbody *ngIf=\\\"users.length === 0\\\">\\n        <tr>\\n          <td colspan=\\\"4\\\">There are no registered users.</td>\\n        </tr>\\n      </tbody>\\n      <tbody>\\n        <tr *ngFor=\\\"let user of users\\\">\\n          <td>{{user.username}}</td>\\n          <td>{{user.email}}</td>\\n          <td>{{user.role}}</td>\\n          <td>\\n            <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"deleteUser(user)\\\" [disabled]=\\\"auth.currentUser._id === user._id\\\">\\n              <i class=\\\"fa fa-trash\\\"></i> Delete\\n            </button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div> -->\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\nimport { ToastComponent } from '../../shared/toast/toast.component';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { UserService } from '../../core/services/user.service';\nimport { User } from '../../core/models/user.model';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'gp-admin-user',\n  templateUrl: './admin-user.component.html',\n  styleUrls: ['./admin-user.component.scss']\n})\nexport class AdminUserComponent implements OnInit {\n  users: User[] = [];\n  isLoading = true;\n\n  isEditing = false;\n  user = new User;\n\n  editForm: FormGroup;\n  username = new FormControl('', [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(30),\n  ]);\n  email = new FormControl('', [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(100)\n  ]);\n  password = new FormControl('', [\n    Validators.required,\n    Validators.minLength(6)\n  ]);\n  role = new FormControl('', [\n    Validators.required\n  ]);\n  nombre = new FormControl('', [\n    Validators.required\n  ]);\n  apellido = new FormControl('', [\n    Validators.required\n  ]);\n  cargo = new FormControl('', [\n    Validators.required\n  ]);\n  identificacion = new FormControl('', [\n    Validators.required\n  ]);\n  hide = false;\n  correoErrorMessage() {\n    return this.email.hasError('required') ? 'Debe ingresar email' :\n      this.email.hasError('email') ? 'No es un email valido' :\n        '';\n  }\n  passErrorMessage() {\n    return this.password.hasError('required') ? 'Debe ingresar Contraseña' :\n      this.password.hasError('minlength') ? 'La contraseña debe tener almenos 6 caracteres' :\n        this.password.hasError('maxlength') ? 'La contraseña debe tener menos de 15 caracteres' :\n          '';\n  }\n\n  nombreErrorMessage() {\n    return this.nombre.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n  apellidoErrorMessage() {\n    return this.apellido.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n  identificacionErrorMessage() {\n    return this.identificacion.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n  cargoErrorMessage() {\n    return this.cargo.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public auth: AuthService,\n    public toast: ToastComponent,\n    private userService: UserService) {\n  }\n\n  ngOnInit() {\n    this.getUsers();\n    this.editForm = this.formBuilder.group({\n      username: this.username,\n      email: this.email,\n      password: this.password,\n      role: this.role,\n      nombre: this.nombre,\n      apellido: this.apellido,\n      identificacion: this.identificacion,\n      cargo: this.cargo\n    });\n  }\n\n  edit(user: User): void {\n    this.userService.editUser(user).subscribe(\n      () => {\n        this.isEditing = false;\n        this.user = user;\n        this.toast.setMessage('Usuario editado con exito.', 'success');\n        this.getUsers();\n      },\n      error => console.log(error)\n    );\n  }\n  cancelEditing() {\n    this.isEditing = false;\n    this.user = new User();\n    this.toast.setMessage('Edición cancelada.', 'warning');\n    this.getUsers();\n  }\n\n  enableEditing(user: User) {\n    this.isEditing = true;\n    this.user = user;\n  }\n\n  getUsers() {\n    this.userService.getUsers().subscribe(\n      data => this.users = data,\n      error => console.log(error),\n      () => this.isLoading = false\n    );\n  }\n\n  deleteUser(user: User) {\n    if (window.confirm('Estás segur@ que quieres Eliminar ' + user.username + '?')) {\n      this.userService.deleteUser(user).subscribe(\n        data => this.toast.setMessage('user deleted successfully.', 'success'),\n        error => console.log(error),\n        () => this.getUsers()\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { AdminUserComponent } from './admin-user/admin-user.component';\nimport { RegisterUserComponent } from './register-user/register-user.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { SharedModule } from '../shared';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    SharedModule\n  ],\n  declarations: [AdminUserComponent, RegisterUserComponent, AdminComponent]\n})\nexport class AdminModule { }\n","module.exports = \"<nav mat-tab-nav-bar >\\n  <a mat-tab-link\\n     *ngFor=\\\"let i of admin\\\"\\n     [routerLink]=\\\"i.link\\\"\\n     routerLinkActive #rla=\\\"routerLinkActive\\\"\\n     [active]=\\\"rla.isActive\\\">\\n    {{i.label}}\\n  </a>\\n</nav>\\n\\n<div [@routeAnimations]=\\\"o.isActivated && o.activatedRoute.routeConfig.path\\\" class=\\\"container\\\">\\n  <router-outlet #o=\\\"outlet\\\"></router-outlet>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\nimport { routeAnimations } from '@app/core';\n\n@Component({\n  selector: 'gp-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss'],\n  animations: [routeAnimations]\n})\nexport class AdminComponent implements OnInit {\n  admin = [\n    { link: 'admin-user', label: 'Administrar Usuarios' },\n    { link: 'register-user', label: 'Registrar Usuario' }\n  ];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<gp-toast [message]=\\\"toast.message\\\"></gp-toast>\\n<div class=\\\"container-fluid \\\">\\n  <div class=\\\"row justify-content-center \\\">\\n    <mat-card class=\\\"col-12 col-md-8\\\">\\n      <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\" class=\\\"form-signin container-fluid\\\">\\n        <mat-card-header class=\\\"row\\\">\\n          <mat-card-title class=\\\"col-12\\\">Registro de Usuario</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"row container-fluid\\\">\\n\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <i class=\\\"material-icons\\\">face</i>\\n            <mat-form-field color=\\\"accent\\\" [ngClass]=\\\"setClassUsername()\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>username</mat-label>\\n              <input type=\\\"text\\\" matInput name=\\\"username\\\" formControlName=\\\"username\\\" disabled [ngModel]= \\\"nombre.value + '.' + apellido.value | lowercase\\\">\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <i class=\\\"material-icons\\\">email</i>\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Email</mat-label>\\n              <input type=\\\"text\\\" matInput placeholder=\\\"Email\\\" name=\\\"email\\\" formControlName=\\\"email\\\" />\\n              <mat-error *ngIf=\\\"email.invalid\\\">{{correoErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Identificación</mat-label>\\n              <input type=\\\"text\\\" matInput placeholder=\\\"Identificacion\\\" name=\\\"identificacion\\\" formControlName=\\\"identificacion\\\" />\\n              <mat-error *ngIf=\\\"identificacion.invalid\\\">{{identificacionErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Nombre</mat-label>\\n              <input type=\\\"text\\\" matInput placeholder=\\\"Nombre\\\" name=\\\"nombre\\\" formControlName=\\\"nombre\\\" />\\n              <mat-error *ngIf=\\\"nombre.invalid\\\">{{nombreErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Apellido</mat-label>\\n              <input type=\\\"text\\\" matInput placeholder=\\\"Apellido\\\" name=\\\"apellido\\\" formControlName=\\\"apellido\\\" />\\n              <mat-error *ngIf=\\\"apellido.invalid\\\">{{apellidoErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <mat-form-field color=\\\"accent\\\" class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Cargo</mat-label>\\n              <input type=\\\"text\\\" matInput placeholder=\\\"Cargo\\\" name=\\\"cargo\\\" formControlName=\\\"cargo\\\" />\\n              <mat-error *ngIf=\\\"cargo.invalid\\\">{{cargoErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <i class=\\\"material-icons\\\">supervisor_account</i>\\n            <mat-form-field class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Rol</mat-label>\\n              <mat-select [(value)]=\\\"role\\\" name=\\\"role\\\" placeholder=\\\"Rol\\\" formControlName=\\\"role\\\">\\n                <mat-option>None</mat-option>\\n                <mat-option value=\\\"admin\\\">Admin</mat-option>\\n                <mat-option value=\\\"user\\\">User</mat-option>\\n              </mat-select>\\n            </mat-form-field>\\n          </div>\\n          <div class=\\\"row justify-content-center align-items-center\\\">\\n            <i class=\\\"material-icons\\\">lock_outline</i>\\n            <mat-form-field class=\\\"col\\\" appearance=\\\"fill\\\">\\n              <mat-label>Contraseña</mat-label>\\n              <input matInput id=\\\"password\\\" \\n              [type]=\\\"!hide ? 'password' : 'text'\\\"\\n               name=\\\"password\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\">\\n              <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\n              <mat-error *ngIf=\\\"password.invalid\\\">{{passErrorMessage()}}</mat-error>\\n            </mat-form-field>\\n          </div>\\n        </mat-card-content>\\n        <mat-card-actions class=\\\"row \\\">\\n          <button mat-flat-button type=\\\"submit\\\" [disabled]=\\\"!registerForm.valid\\\">Agregar</button>\\n        </mat-card-actions>\\n      </form>\\n    </mat-card>\\n\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ToastComponent } from '../../shared/toast/toast.component';\nimport { UserService } from '../../core/services/user.service';\nimport { EqualValidator } from './password-validation';\n\nfunction passwordMatchValidator(g: FormGroup) {\n  return g.get('password').value === g.get('passwordConfirm').value\n    ? null : { 'mismatch': true };\n}\n@Component({\n  selector: 'gp-register-user',\n  templateUrl: './register-user.component.html',\n  styleUrls: ['./register-user.component.scss']\n})\nexport class RegisterUserComponent implements OnInit {\n\n  registerForm: FormGroup;\n  username = new FormControl('', [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(30),\n  ]);\n  email = new FormControl('', [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(100)\n  ]);\n  password = new FormControl('', [\n    Validators.required,\n    Validators.minLength(6)\n  ]);\n  role = new FormControl('', [\n    Validators.required\n  ]);\n  nombre = new FormControl('', [\n    Validators.required\n  ]);\n  apellido = new FormControl('', [\n    Validators.required\n  ]);\n  cargo = new FormControl('', [\n    Validators.required\n  ]);\n  identificacion = new FormControl('', [\n    Validators.required\n  ]);\n  hide = false;\n\n  correoErrorMessage() {\n    return this.email.hasError('required') ? 'Debe ingresar email' :\n      this.email.hasError('email') ? 'No es un email valido' :\n        '';\n  }\n  passErrorMessage() {\n    return this.password.hasError('required') ? 'Debe ingresar Contraseña' :\n      this.password.hasError('minlength') ? 'La contraseña debe tener almenos 6 caracteres' :\n        this.password.hasError('maxlength') ? 'La contraseña debe tener menos de 15 caracteres' :\n          '';\n  }\n\n  nombreErrorMessage() {\n    return this.nombre.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n  apellidoErrorMessage() {\n    return this.apellido.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n  identificacionErrorMessage() {\n    return this.identificacion.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n  cargoErrorMessage() {\n    return this.cargo.hasError('required') ? 'Debe ingresar Contraseña' :\n      '';\n  }\n\n  constructor(private formBuilder: FormBuilder,\n    private router: Router,\n    public toast: ToastComponent,\n    private userService: UserService) { }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      username: this.username,\n      email: this.email,\n      password: this.password,\n      role: this.role,\n      nombre: this.nombre,\n      apellido: this.apellido,\n      identificacion: this.identificacion,\n      cargo: this.cargo\n\n    });\n  }\n\n  setClassUsername() {\n    return { 'has-danger': !this.username.pristine && !this.username.valid };\n  }\n\n  setClassEmail() {\n    return { 'has-danger': !this.email.pristine && !this.email.valid };\n  }\n\n  setClassPassword() {\n    return { 'has-danger': !this.password.pristine && !this.password.valid };\n  }\n\n  register() {\n    this.userService.register(this.registerForm.value).subscribe(\n      res => {\n        this.toast.setMessage('you successfully registered!', 'success');\n        this.router.navigate(['/admin/admin-user']);\n      },\n      error => this.toast.setMessage('email already exists', 'danger')\n    );\n  }\n}\n"],"sourceRoot":""}